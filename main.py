import logging
import sqlite3
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
BOT_TOKEN = "8376106425:AAFj2QKo7qK5zqvbGbhE_whIbUngY8S9r10"
ADMIN_CHAT_ID = 123456789  # id –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
DB_PATH = "restaurant_bot.db"

# ========== –õ–û–ì–ò ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
(
    REG_NAME,
    REG_PHONE,
    CHOOSE_RESTAURANT,
) = range(3)

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ==========
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT,
        phone TEXT,
        restaurant_id INTEGER
    )
    """)
    # —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    cur.execute("""
    CREATE TABLE IF NOT EXISTS restaurants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        description TEXT
    )
    """)
    conn.commit()

    # –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ ‚Äî –¥–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ
    cur.execute("SELECT COUNT(*) FROM restaurants")
    if cur.fetchone()[0] == 0:
        restaurants = [
            ("La Tavola", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –¥–æ–º–∞—à–Ω–µ–π –ø–∞—Å—Ç–æ–π –∏ –≤–∏–Ω–æ–º"),
            ("Sakura", "–Ø–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, —Å—É—à–∏, —Ä–æ–ª–ª—ã –∏ —Ç–µ–ø–∞–Ω—å—è–∫–∏"),
            ("Grill House", "–°—Ç–µ–π–∫–∏ –∏ –±—É—Ä–≥–µ—Ä—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –æ–≥–Ω–µ")
        ]
        cur.executemany("INSERT INTO restaurants (name, description) VALUES (?,?)", restaurants)
        conn.commit()

    conn.close()

# ========== –•–ï–ù–î–õ–ï–†–´ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT full_name, phone, restaurant_id FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    conn.close()

    if user is None:
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return REG_NAME
    elif user[2] is None:
        await show_restaurant_choice(update, context)
        return CHOOSE_RESTAURANT
    else:
        await show_main_menu(update, context)
        return ConversationHandler.END


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["name"] = name
    await update.message.reply_text("üì± –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):")
    return REG_PHONE

async def reg_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    user_id = update.effective_user.id
    name = context.user_data["name"]

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO users (user_id, full_name, phone) VALUES (?,?,?)",
                (user_id, name, phone))
    conn.commit()
    conn.close()

    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await show_restaurant_choice(update, context)
    return CHOOSE_RESTAURANT


# === –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ===
async def show_restaurant_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM restaurants")
    items = cur.fetchall()
    conn.close()

    buttons = [[InlineKeyboardButton(name, callback_data=f"rest|{rid}")] for rid, name in items]
    await update.message.reply_text("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=InlineKeyboardMarkup(buttons))

async def restaurant_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    rest_id = int(data[1])
    user_id = query.from_user.id

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE users SET restaurant_id=? WHERE user_id=?", (rest_id, user_id))
    conn.commit()
    # –ø–æ–ª—É—á–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    cur.execute("SELECT name FROM restaurants WHERE id=?", (rest_id,))
    rest_name = cur.fetchone()[0]
    conn.close()

    await query.message.reply_text(f"üç∑ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω *{rest_name}*.", parse_mode="Markdown")
    await show_main_menu(update, context)
    return ConversationHandler.END


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üçΩ –ú–µ–Ω—é", callback_data="menu")],
        [InlineKeyboardButton("üìÖ –ë—Ä–æ–Ω—å", callback_data="booking")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", callback_data="about")],
        [InlineKeyboardButton("‚≠ê –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
    ]
    if update.message:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏) ===
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("üçù –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏).")

async def booking_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("üìÖ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –±—Ä–æ–Ω—å —Å—Ç–æ–ª–∏–∫–∞ (–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏).")

async def about_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        SELECT r.name, r.description 
        FROM users u
        JOIN restaurants r ON u.restaurant_id = r.id
        WHERE u.user_id = ?
    """, (user_id,))
    row = cur.fetchone()
    conn.close()
    if row:
        name, desc = row
        await query.message.reply_text(f"‚ÑπÔ∏è *{name}*\n{desc}", parse_mode="Markdown")
    else:
        await query.message.reply_text("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω.")

async def profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_id = update.callback_query.from_user.id
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        SELECT full_name, phone, r.name 
        FROM users u
        LEFT JOIN restaurants r ON u.restaurant_id = r.id
        WHERE u.user_id=?
    """, (user_id,))
    row = cur.fetchone()
    conn.close()
    if row:
        name, phone, rest = row
        await update.callback_query.message.reply_text(
            f"üë§ *{name}*\nüì± {phone}\nüè¢ –†–µ—Å—Ç–æ—Ä–∞–Ω: {rest or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}",
            parse_mode="Markdown"
        )
    else:
        await update.callback_query.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# ========== MAIN ==========
def main():
    init_db()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
            REG_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_phone)],
            CHOOSE_RESTAURANT: [CallbackQueryHandler(restaurant_chosen, pattern="^rest\\|")]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    app.add_handler(conv)

    # –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(menu_callback, pattern="^menu$"))
    app.add_handler(CallbackQueryHandler(booking_callback, pattern="^booking$"))
    app.add_handler(CallbackQueryHandler(about_callback, pattern="^about$"))
    app.add_handler(CallbackQueryHandler(profile_callback, pattern="^profile$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
