# main.py
import logging
import json
from datetime import datetime
import aiosqlite
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN = "8376106425:AAFj2QKo7qK5zqvbGbhE_whIbUngY8S9r10"            # <- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
ADMIN_CHAT_ID = 123456789                   # <- —Å—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω—è—Ö (–≤–∞—à id –∏–ª–∏ –≥—Ä—É–ø–ø–∞)
DB_PATH = "restaurant_bot.db"
# –£–∫–∞–∂–∏ —Å—é–¥–∞ –ø—É–±–ª–∏—á–Ω—ã–π URL –≥–¥–µ –ª–µ–∂–∏—Ç —Ç–≤–æ–π webapp (index.html, script.js, style.css).
# –ü—Ä–∏–º–µ—Ä –¥–ª—è GitHub Pages: "https://username.github.io/repo-name"
WEBAPP_BASE_URL = "https://N1kLeS.github.io/Bot_TG"  # <- –æ–±–Ω–æ–≤–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã ==========
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                restaurant TEXT
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS restaurants (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                restaurant TEXT,
                type TEXT,            -- 'book_dish' –∏–ª–∏ 'booking_form'
                payload TEXT,         -- json payload
                created_at TEXT
            )
        """)
        await db.commit()

        # –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        async with db.execute("SELECT COUNT(*) FROM restaurants") as cur:
            row = await cur.fetchone()
            if row and row[0] == 0:
                sample = [
                    ("Lemon Place", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∏ —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è"),
                    ("Sushi Bar", "–°–≤–µ–∂–∏–µ —Ä–æ–ª–ª—ã –∏ —Å–∞—à–∏–º–∏"),
                    ("Steak House", "–°—Ç–µ–π–∫–∏ –∏ –≥—Ä–∏–ª—å")
                ]
                await db.executemany("INSERT INTO restaurants (name, description) VALUES (?,?)", sample)
                await db.commit()

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
async def get_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id, username, full_name, phone, restaurant FROM users WHERE user_id=?", (user_id,)) as cur:
            return await cur.fetchone()

async def ensure_user_exists(user):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?,?,?)",
            (user.id, user.username, user.full_name)
        )
        await db.commit()

async def get_restaurants():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT name, description FROM restaurants") as cur:
            return await cur.fetchall()

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========

# /start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await init_db()
    user = update.effective_user
    await ensure_user_exists(user)
    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –æ–±—ã—á–Ω—ã–π message
    if update.message:
        await show_main_menu(update)
    else:
        # –≤–æ–∑–º–æ–∂–Ω–æ callback
        await show_main_menu(update)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, text: str = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"):
    keyboard = [
        [InlineKeyboardButton("üìã –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üç¥ –í—ã–±—Ä–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="choose_restaurant")],
        [InlineKeyboardButton("üìñ –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="open_menu")],
        [InlineKeyboardButton("üï∞ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", callback_data="open_booking")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", callback_data="about")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # edit_message_text –µ—Å–ª–∏ callback, –∏–Ω–∞—á–µ send message
    if update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
        except Exception:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

# –ü—Ä–æ—Ñ–∏–ª—å
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    row = await get_user(user_id)
    if row:
        _, username, full_name, phone, restaurant = row
        text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {full_name or '-'}\n–Æ–∑–µ—Ä: @{username}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}"
    else:
        text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

# –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (—Å–ø–∏—Å–æ–∫)
async def choose_restaurant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rows = await get_restaurants()
    keyboard = [[InlineKeyboardButton(name, callback_data=f"set_rest|{name}")] for (name, _) in rows]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    await query.edit_message_text("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=InlineKeyboardMarkup(keyboard))

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
async def set_restaurant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("|", 1)
    if len(data) < 2:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return
    rest_name = data[1]
    user_id = query.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET restaurant = ? WHERE user_id = ?", (rest_name, user_id))
        await db.commit()
    await show_main_menu(update, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {rest_name}")

# –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ)
async def about_restaurant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    row = await get_user(user_id)
    restaurant = row[4] if row else None
    if not restaurant:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
        return
    # –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã restaurants, –Ω–æ –ø–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    text = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ *{restaurant}*.\n–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –≤–∫—É—Å–Ω–∞—è –µ–¥–∞."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# –û—Ç–∫—Ä—ã—Ç—å WebApp: –º–µ–Ω—é
async def open_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    row = await get_user(user_id)
    restaurant = row[4] if row else None
    if not restaurant:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
        return
    # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî index.html?restaurant=...
    url = f"{WEBAPP_BASE_URL}/index.html?restaurant={restaurant}"
    keyboard = [
        [InlineKeyboardButton("üçΩ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", web_app=WebAppInfo(url=url))],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    await query.edit_message_text(f"–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ *{restaurant}*:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# –û—Ç–∫—Ä—ã—Ç—å WebApp: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async def open_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    row = await get_user(user_id)
    restaurant = row[4] if row else None
    if not restaurant:
        await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
        return
    url = f"{WEBAPP_BASE_URL}/index.html?restaurant={restaurant}#booking"
    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", web_app=WebAppInfo(url=url))],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    await query.edit_message_text(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ *{restaurant}*:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "profile":
        await show_profile(update, context)
    elif data == "choose_restaurant":
        await choose_restaurant(update, context)
    elif data.startswith("set_rest|"):
        await set_restaurant(update, context)
    elif data == "open_menu":
        await open_menu(update, context)
    elif data == "open_booking":
        await open_booking(update, context)
    elif data == "about":
        await about_restaurant(update, context)
    elif data == "main_menu":
        await show_main_menu(update)
    else:
        await update.callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp (tg.sendData)
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or not getattr(msg, "web_app_data", None):
        return
    data_raw = msg.web_app_data.data  # JSON —Å—Ç—Ä–æ–∫–∞, –ø—Ä–∏—Å–ª–∞–Ω–Ω–∞—è script.js
    try:
        payload = json.loads(data_raw)
    except Exception as e:
        logger.exception("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å web_app_data")
        await msg.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp.")
        return

    user = update.effective_user
    restaurant = payload.get("restaurant")
    action = payload.get("action")
    data = payload.get("data")

    # –°–æ—Ö—Ä–∞–Ω–∏–º –±—Ä–æ–Ω—å –≤ –ë–î
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO bookings (user_id, restaurant, type, payload, created_at) VALUES (?,?,?,?,?)",
            (user.id, restaurant, action, json.dumps(data, ensure_ascii=False), datetime.utcnow().isoformat())
        )
        await db.commit()
        # –Ω–∞–π–¥—ë–º id –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Å—Ç–∞–≤–∫–∏
        async with db.execute("SELECT last_insert_rowid()") as cur:
            row = await cur.fetchone()
            booking_id = row[0] if row else None

    # –û—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    admin_text = f"–ù–æ–≤–∞—è WebApp –±—Ä–æ–Ω—å #{booking_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or user.username} ({user.id})\n–†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant}\n–î–µ–π—Å—Ç–≤–∏–µ: {action}\n–î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)}"
    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text)
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s", e)

    # –û—Ç–≤–µ—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.reply_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /cancel (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤)
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")

# ========== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==========
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.add_handler(CommandHandler("cancel", cancel))

    logger.info("Bot starting...")
    app.run_polling()

if __name__ == "__main__":
    main()
